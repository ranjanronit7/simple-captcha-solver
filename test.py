import os
from dotenv import load_dotenv
load_dotenv()

from solve_captcha import CaptchaSolver


templates_json_path = os.getenv('TEMPLATES_JSON_PATH')  # generated by running create_template_json.py
test_images_path = os.getenv('TEST_IMAGES_PATH')


# get list of immediate files in a directory
def get_subfiles(path):
    return next(os.walk(path))[2]


def get_captcha_string(captcha_image_path):
    captcha_solver_obj = CaptchaSolver()
    templates_json = captcha_solver_obj.read_templates_data(templates_json_path)
    captcha_string = captcha_solver_obj.get_captcha_string(templates_json, captcha_image_path)
    return captcha_string


def test():
    filenames = get_subfiles(test_images_path)
    count_correct = 0
    for filename in filenames:
        actual_captcha_string = filename.split('.')[0]
        predicted_captcha_string = get_captcha_string(os.path.join(test_images_path, filename))
        print('\nfilename: ', filename)
        print('comparison: pred - {} == actual - {}'.format(predicted_captcha_string, actual_captcha_string))
        if predicted_captcha_string.upper() == actual_captcha_string.upper():
            count_correct += 1

        # uncomment below to stop and inspect the wrong predictions

        # else:
        #     image = cv2.imread(os.path.join(test_images_path, filename), cv2.IMREAD_UNCHANGED)
        #     image_gray = 255 - image[:, :, 3]
        #     _, image_binary = cv2.threshold(image_gray, 127, 255, cv2.THRESH_BINARY)
        #     captcha_binary_inverse = cv2.bitwise_not(image_binary)
        #
        #     cv2.imshow('captcha', captcha_binary_inverse)
        #     cv2.waitKey(0)
        #     cv2.destroyAllWindows()

            # input('\nPress Enter ...\n')
    print('\nAccuracy: {} / {} = {}'.format(count_correct, len(filenames), float(count_correct) / float(len(filenames)) * 100.0))


if __name__ == '__main__':
    test()
